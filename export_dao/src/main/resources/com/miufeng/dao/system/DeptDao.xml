<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.miufeng.dao.system.DeptDao">
    <!--结果映射-->
    <resultMap id="BaseResultMap" type="dept">
        <id     column="dept_id" property="id"/>
        <result column="dept_name" property="deptName"/>
        <result column="state" property="state"/>
        <result column="company_id" property="companyId"/>
        <result column="company_name" property="companyName"/>
        <!--如果一个一对一的情况我们使用
               property: 实体类的属性名
                select: 调用的方法名，注意：如果该方法在其他接口中需要写上全类名+方法名
                column: 传递给调用方法的列名的数据
        -->
        <association property="parent" column="parent_id" select="findById"/>
    </resultMap>

    <!--//查询所有部门列表, 注意：需要根据公司id才查，因为每个公司有自己对应的部门
    List<Dept> findAll(Integer companyId);-->
    <select id="findAll" resultMap="BaseResultMap">
        select * from pe_dept where company_id=#{companyId}
    </select>

    <!--//根据部门id查询部门
    Dept findById(String id);-->
    <select id="findById" resultMap="BaseResultMap">
        select * from pe_dept where dept_id=#{id}
    </select>

    <!--//查找指定部门列表
    List<Dept> findAllDeptPro(String companyId, String id);-->
    <select id="findAllDeptPro" resultMap="BaseResultMap">
        SELECT * FROM pe_dept WHERE company_id=#{arg0} AND NOT dept_id =#{arg1}
    </select>

    <!--//添加部门
    void add(Dept dept);-->
    <insert id="save">
        insert into pe_dept values (
            #{id},
            #{deptName},

            <choose>
                <when test="parent.id != null and parent.id != ''">
                    #{parent.id},
                </when>
                <otherwise>
                    null,
                </otherwise>
            </choose>

            #{state},
            #{companyId},
            #{companyName}
        )
    </insert>

    <!--//修改部门信息
    void update(Dept dept);-->
    <update id="update">
        update pe_dept set
            dept_name=#{deptName},
            <!--解决可能没有上级部门的情况-->
            <choose>
                <when test="parent.id != null and parent.id != ''">
                    parent_id=#{parent.id},
                </when>
                <otherwise>
                    parent_id=null,
                </otherwise>
            </choose>
            state=#{state},
            company_id=#{companyId},
            company_name=#{companyName}
        where dept_id=#{id}
    </update>

    <!--//根据父部门的id查找部门
    int findByParentId(String id)-->
    <select id="findByParentId" resultType="int">
        select count(*) from pe_dept where parent_id=#{id}
    </select>

    <!--//根据部门id查找用户
    int findByPeptId(String id);-->
    <select id="findByPeptId" resultType="int">
        select count(*) from pe_user where dept_id=#{id};
    </select>

    <!--//根据部门id删除部门
    void delete(String id);-->
    <delete id="delete">
        delete from pe_dept where dept_id=#{id}
    </delete>
</mapper>